// TypeScript definitions for @pgsql/parser

// Supported versions
export type SupportedVersion = ${VERSION_UNION};

// Version-specific type imports
${VERSION_TYPE_IMPORTS}

// Version-specific type mappings
type ParseResultVersionMap = {
${VERSION_PARSE_RESULT_MAP}
};

type NodeVersionMap = {
${VERSION_NODE_MAP}
};

// Generic types with version constraints
export type ParseResult<Version extends SupportedVersion = SupportedVersion> = 
  ParseResultVersionMap[Version];

export type Node<Version extends SupportedVersion = SupportedVersion> = 
  NodeVersionMap[Version];

// SQL Error types
export interface SqlErrorDetails {
  message: string;
  cursorPosition: number;
  fileName?: string;
  functionName?: string;
  lineNumber?: number;
  context?: string;
}

export declare class SqlError extends Error {
  readonly name: 'SqlError';
  sqlDetails?: SqlErrorDetails;
  constructor(message: string, details?: SqlErrorDetails);
}

// Parser options
export interface ParserOptions<Version extends SupportedVersion> {
  version?: Version;
}

// Main Parser class with generic version support
export declare class Parser<Version extends SupportedVersion = ${DEFAULT_VERSION}> {
  readonly version: Version;
  readonly ready: Promise<void>;
  
  constructor(options?: ParserOptions<Version>);
  
  /**
   * Parse SQL asynchronously. Returns a properly typed ParseResult for the parser version.
   * @throws {SqlError} if parsing fails
   */
  parse(query: string): Promise<ParseResult<Version>>;
  
  /**
   * Parse SQL synchronously. Returns a properly typed ParseResult for the parser version.
   * @throws {SqlError} if parsing fails
   */
  parseSync(query: string): ParseResult<Version>;
  
  /**
   * Load the parser module. This is called automatically on first parse,
   * but can be called manually to pre-load the WASM module.
   */
  loadParser(): Promise<void>;
}

// Legacy compatibility interface (for backward compatibility)
export interface LegacyParseResult {
  parse_tree?: any;
  stderr_buffer?: string;
  error?: {
    message: string;
    funcname: string;
    filename: string;
    lineno: number;
    cursorpos: number;
    context?: string;
  };
}

// Utility functions
export declare function isSupportedVersion(version: unknown): version is SupportedVersion;
export declare function getSupportedVersions(): readonly SupportedVersion[];

export default Parser;

// Version-specific exports
${VERSION_TYPE_EXPORTS}

// Re-export types from the default version
export * from './v${DEFAULT_VERSION}/types';