// CommonJS entry point for @pgsql/parser
// Provides dynamic version loading for PostgreSQL parsers

const SUPPORTED_VERSIONS = [${VERSIONS}];

class Parser {
  constructor(options = {}) {
    const version = options.version || ${DEFAULT_VERSION};
    
    if (!SUPPORTED_VERSIONS.includes(version)) {
      throw new Error(`Unsupported PostgreSQL version: ${version}. Supported versions are ${VERSIONS}.`);
    }
    
    this.version = version;
    this.parser = null;
    this._loadPromise = null;
    
    // Create the ready promise
    this.ready = new Promise((resolve) => {
      this._resolveReady = resolve;
    });
  }

  async loadParser() {
    if (this.parser) return;
    
    // Ensure we only load once
    if (!this._loadPromise) {
      this._loadPromise = this._doLoad();
    }
    
    return this._loadPromise;
  }
  
  async _doLoad() {
    // Dynamic require for CommonJS
    this.parser = require(`./v${this.version}/index.cjs`);
    
    if (this.parser.loadModule) {
      await this.parser.loadModule();
    }
    
    // Resolve the ready promise
    this._resolveReady();
  }

  async parse(query) {
    if (!this.parser) {
      await this.loadParser();
    }
    try {
      return await this.parser.parse(query);
    } catch (error) {
      // Preserve the original error if it's a SqlError
      if (error.name === 'SqlError') {
        throw error;
      }
      throw new Error(`Parse error in PostgreSQL ${this.version}: ${error.message}`);
    }
  }

  parseSync(query) {
    if (!this.parser) {
      throw new Error('Parser not loaded. Call loadParser() first or use parse() for automatic loading.');
    }
    try {
      return this.parser.parseSync(query);
    } catch (error) {
      // Preserve the original error if it's a SqlError
      if (error.name === 'SqlError') {
        throw error;
      }
      throw new Error(`Parse error in PostgreSQL ${this.version}: ${error.message}`);
    }
  }
}

// Utility functions
function isSupportedVersion(version) {
  return SUPPORTED_VERSIONS.includes(version);
}

function getSupportedVersions() {
  return [...SUPPORTED_VERSIONS];
}

// Export versions
module.exports = {
  Parser,
  default: Parser,
  isSupportedVersion,
  getSupportedVersions,
${VERSION_REQUIRES}
};