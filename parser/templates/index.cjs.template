// CommonJS entry point for @pgsql/parser
// Provides dynamic version loading for PostgreSQL parsers

class Parser {
  constructor(version = ${DEFAULT_VERSION}) {
    if (![${VERSIONS}].includes(version)) {
      throw new Error(`Unsupported PostgreSQL version: ${version}. Supported versions are ${VERSIONS}.`);
    }
    this.version = version;
    this.parser = null;
  }

  async loadParser() {
    if (this.parser) return;
    
    // Dynamic require for CommonJS
    this.parser = require(`./v${this.version}/index.cjs`);
    
    if (this.parser.loadModule) {
      await this.parser.loadModule();
    }
  }

  async parse(query) {
    await this.loadParser();
    try {
      return this.parser.parse(query);
    } catch (error) {
      // Preserve the original error if it's a SqlError
      if (error.name === 'SqlError') {
        throw error;
      }
      throw new Error(`Parse error in PostgreSQL ${this.version}: ${error.message}`);
    }
  }

  parseSync(query) {
    if (!this.parser) {
      throw new Error('Parser not loaded. Call loadParser() first or use parseSync after loading.');
    }
    try {
      return this.parser.parseSync(query);
    } catch (error) {
      // Preserve the original error if it's a SqlError
      if (error.name === 'SqlError') {
        throw error;
      }
      throw new Error(`Parse error in PostgreSQL ${this.version}: ${error.message}`);
    }
  }

}

// Export versions
module.exports = {
  Parser,
  default: Parser,
${VERSION_REQUIRES}
};